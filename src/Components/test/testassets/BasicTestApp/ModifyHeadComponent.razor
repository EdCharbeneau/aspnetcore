@using Microsoft.AspNetCore.Components.Web.Extensions

<p>
    Multiple title elements:<br />

    @for (int i = 0; i < titles.Length; i++)
    {
        var titleId = i;

        <button id="button-title-@i" @onclick="() => Toggle(ref titles[titleId])">
            @GetToggleString(titles[titleId]) title @titleId
        </button>

        if (titles[titleId])
        {
            <Title Value="@($"Title {titleId}")" />
        }
    }
</p>

<p>
    Multiple meta elements:<br />

    @for (int i = 0; i < metas.Length; i++)
    {
        var metaId = i;

        <button id="button-meta-@i" @onclick="() => Toggle(ref metas[metaId])">
            @GetToggleString(metas[metaId]) meta @metaId</button>

        if (metas[metaId])
        {
            <Meta Name="multiple-metas" Content="@($"Meta {metaId}")" />
        }
    }
</p>

<p>
    Nested title elements:<br />

    <button id="button-title-nested" @onclick="() => Toggle(ref renderNestedTitle)">
        @GetToggleString(renderNestedTitle) title nested
    </button>

    @if (renderNestedTitle)
    {
        <div>
            <Title Value="Layer 1" />
            <div>
                <Title Value="Layer 2" />
                <div>
                    <Title Value="Layer 3" />
                    <div>
                        <Title Value="Layer 4" />
                    </div>
                </div>
            </div>
        </div>
    }
</p>

<p>
    Nested meta elements:<br />

    <button id="button-meta-nested" @onclick="() => Toggle(ref renderNestedMeta)">
        @GetToggleString(renderNestedMeta) meta http-equiv nested
    </button>

    @if (renderNestedMeta)
    {
        <div>
            <Meta HttpEquiv="nested-meta" Content="Layer 1" />
            <div>
                <Meta HttpEquiv="nested-meta" Content="Layer 2" />
                <div>
                    <Meta HttpEquiv="nested-meta" Content="Layer 3" />
                    <div>
                        <Meta HttpEquiv="nested-meta" Content="Layer 4" />
                    </div>
                </div>
            </div>
        </div>
    }
</p>

<p>
    Nested link elements:<br />

    <button id="button-link-nested" @onclick="() => Toggle(ref renderNestedLink)">
        @GetToggleString(renderNestedLink) link nested
    </button>

    @if (renderNestedLink)
    {
        <div>
            <Link id="nested-link" attr1="some attribute" attr2="Layer 1" />
            <div>
                <Link id="nested-link" attr1="some attribute" attr2="Layer 2" />
                <div>
                    <Link id="nested-link" attr1="some other attribute" attr2="Layer 3" extra-attr="one more" />
                </div>
            </div>
        </div>
    }
</p>

<p>
    Link elements w/ bindings:<br />
    <input id="link-attr-input-1" @bind="@linkAttribute1" placeholder="Attribute 1" /><br />
    <input id="link-attr-input-2" @bind="@linkAttribute2" placeholder="Attribute 2" /><br />
    <Link id="link-with-bindings" attr1="@linkAttribute1" attr2="@linkAttribute2" />
</p>

@code {
    private readonly bool[] titles = Enumerable.Repeat(false, 3).ToArray();
    private readonly bool[] metas = Enumerable.Repeat(false, 3).ToArray();

    private bool renderNestedTitle = false;
    private bool renderNestedMeta = false;
    private bool renderNestedLink = false;

    private string linkAttribute1 = "First attribute";
    private string linkAttribute2 = "Second attribute";

    private void Toggle(ref bool b)
    {
        b = !b;
        StateHasChanged();
    }

    private string GetToggleString(bool b)
        => b ? "Disable" : "Enable";
}
